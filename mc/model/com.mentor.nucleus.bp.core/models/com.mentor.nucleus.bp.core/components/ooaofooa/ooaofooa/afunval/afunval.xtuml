-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afunval',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("b9f55f80-35f2-4012-8691-51f82a55c050",
	112,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.core::components::ooaofooa::ooaofooa::afunval');
INSERT INTO DIM_DIA
	VALUES ("b9f55f80-35f2-4012-8691-51f82a55c050",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("2302c9dc-91f8-4bbf-9cae-9616732e2343",
	"00000000-0000-0000-0000-000000000000",
	'val_translate',
	'',
	'//====================================================================
//
// $RCSfile: q.val.translate.arc,v $
//
// (c) Copyright 1998-2013 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
//
// These functions set up the implementation of the values (V_VAL on
// model of OAL).
//
//==================================================================== 
//
//
// Translate "leaf" values first.
::val_literal_boolean_values();
::val_literal_integer_values();
::val_literal_real_values();
::val_literal_string_values();
::val_literal_enumerations();
::val_constant_values();
::val_transient_values();
::val_instance_reference_values();
::val_inst_ref_set_values();
::val_selection_test_values();
::val_event_values();
::val_parameter_values();
// The following may be recursed.
::val_attribute_values();
::val_member_values();
::val_array_element_references();
::val_array_length_values();
::val_unary_op_values();
::val_binary_op_values();
// V_PARs depend upon values being populated.
::val_actual_parameters();
// These use V_PARs.
::val_message_values();
::val_bridge_values();
::val_transform_values();
::val_synch_service_values();
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("2302c9dc-91f8-4bbf-9cae-9616732e2343",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2e82d65d-a20f-4461-88e4-dc2519cc434e",
	"00000000-0000-0000-0000-000000000000",
	'gen_value',
	'',
	'//
//--------------------------------------------------------------------
// Percolate the values from the "leaves" up into the combined
// expressions by recursively drilling down.
//--------------------------------------------------------------------
v_val = param.v_val;
select one v_mvl related by v_val->V_MVL[R801];
if ( not_empty v_mvl )
  ::val_member_value( v_mvl:v_mvl );
else
  select one v_avl related by v_val->V_AVL[R801];
  if ( not_empty v_avl )
    ::val_attribute_value( v_avl:v_avl );
  else
    select one v_aer related by v_val->V_AER[R801];
    if ( not_empty v_aer )
      ::val_array_element_reference( v_aer:v_aer );
    else
      select one v_alv related by v_val->V_ALV[R801];
      if ( not_empty v_alv )
        ::val_array_length_value( v_alv:v_alv );
      else
        select one v_uny related by v_val->V_UNY[R801];
        if ( not_empty v_uny )
          ::val_unary_op_value( v_uny:v_uny );
        else
          select one v_bin related by v_val->V_BIN[R801];
          if ( not_empty v_bin )
            ::val_binary_op_value( v_bin:v_bin );
          else
            select one v_trv related by v_val->V_TRV[R801];
            if ( not_empty v_trv )
              ::val_transform_value( v_trv:v_trv, salt:"TRV" );
            else
              select one v_msv related by v_val->V_MSV[R801];
              if ( not_empty v_msv )
                ::val_message_value( v_msv:v_msv, salt:"MSV" );
              else
                select one v_brv related by v_val->V_BRV[R801];
                if ( not_empty v_brv )
                  ::val_bridge_value( v_brv:v_brv, salt:"BRV" );
                else
                  select one v_fnv related by v_val->V_FNV[R801];
                  if ( not_empty v_fnv )
                    ::val_synch_service_value( v_fnv:v_fnv, salt:"FNV" );
                  else
                    T::print(s:"ERROR:  Recursive V_VAL resolution issue.");
                  end if;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("3460d182-d586-4d6a-89c8-47d63a6c79b1",
	"2e82d65d-a20f-4461-88e4-dc2519cc434e",
	'v_val',
	"6c890e9d-8533-4087-ac72-ea19e3290a3c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6c890e9d-8533-4087-ac72-ea19e3290a3c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Value>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("2e82d65d-a20f-4461-88e4-dc2519cc434e",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ea0c7df4-6537-4c61-9234-25c0d8c0ad49",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_boolean_values',
	'',
	'//
select many v_lbos from instances of V_LBO;
for each v_lbo in v_lbos
  select one te_val related by v_lbo->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lbo.Value;
  te_val.buffer = v_lbo.Value;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("ea0c7df4-6537-4c61-9234-25c0d8c0ad49",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bff618df-d743-4022-bd6a-84e0ab45caad",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_string_values',
	'',
	'//
select any te_string from instances of TE_STRING;
select many v_lsts from instances of V_LST;
for each v_lst in v_lsts
  select one te_val related by v_lst->V_VAL[R801]->TE_VAL[R2040];
  // s = T::t( s:v_lst.Value );
  s = v_lst.Value;
  // if ( strstr( s, "({" ) )
  if ( "({" == s )
    te_val.buffer = s;
  else
    te_val.buffer = ( "&quot;" + v_lst.Value ) + "&quot;";
  end if;
  te_val.OAL = ( "" + v_lst.Value ) + "";
  te_val.dimensions = 1;
  te_val.array_spec = ( "[" + te_string.max_string_length ) + "]";
  //TODO assign dimension
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("bff618df-d743-4022-bd6a-84e0ab45caad",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e10b84af-3860-4a30-b89c-d829080f94c7",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_integer_values',
	'',
	'//
select many v_lins from instances of V_LIN;
for each v_lin in v_lins
  select one te_val related by v_lin->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lin.Value;
  te_val.buffer = v_lin.Value;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("e10b84af-3860-4a30-b89c-d829080f94c7",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("31c31d33-5a53-4408-a8c1-803c5e3393d3",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_real_values',
	'',
	'//
select many v_lrls from instances of V_LRL;
for each v_lrl in v_lrls
  select one te_val related by v_lrl->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = v_lrl.Value;
  te_val.buffer = v_lrl.Value;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("31c31d33-5a53-4408-a8c1-803c5e3393d3",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("355d4ff5-1abf-47b3-83df-bdc42930918d",
	"00000000-0000-0000-0000-000000000000",
	'val_literal_enumerations',
	'',
	'//
select many v_lens from instances of V_LEN;
for each v_len in v_lens
  select one te_val related by v_len->V_VAL[R801]->TE_VAL[R2040];
  select one te_enum related by v_len->S_ENUM[R824]->TE_ENUM[R2027];
  te_val.OAL = te_enum.Name;
  te_val.buffer = te_enum.GeneratedName;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("355d4ff5-1abf-47b3-83df-bdc42930918d",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3cde5ca6-01da-4a2f-93d7-816097dec957",
	"00000000-0000-0000-0000-000000000000",
	'val_constant_values',
	'',
	'//
select many v_scvs from instances of V_SCV;
for each v_scv in v_scvs
  select one te_val related by v_scv->V_VAL[R801]->TE_VAL[R2040];
  select one cnst_syc related by v_scv->CNST_SYC[R850];
  select one cnst_lsc related by cnst_syc->CNST_LFSC[R1502]->CNST_LSC[R1503];
  select one te_dt related by cnst_syc->S_DT[R1500]->TE_DT[R2021];
  te_val.OAL = cnst_syc.Name;
  te_val.buffer = cnst_lsc.Value;
  if ( 4 == te_dt.Core_Typ )
    select any te_string from instances of TE_STRING;
    te_val.buffer = ( "&quot;" + cnst_lsc.Value ) + "&quot;";
    te_val.dimensions = 1;
    te_val.array_spec = ( "[" + te_string.max_string_length ) + "]";
    //TODO assign dimension
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("3cde5ca6-01da-4a2f-93d7-816097dec957",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d7f947fc-021d-4451-9f99-5411bb0905d1",
	"00000000-0000-0000-0000-000000000000",
	'val_transient_values',
	'',
	'//
select many v_tvls from instances of V_TVL;
for each v_tvl in v_tvls
  select one v_var related by v_tvl->V_VAR[R805];
  select one te_var related by v_var->TE_VAR[R2039];
  select one te_val related by v_tvl->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = te_var.OAL;
  te_val.buffer = te_var.buffer;
  te_val.dimensions = te_var.dimensions;
  te_val.array_spec = te_var.array_spec;
  select one te_dim related by te_var->TE_DIM[R2057];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("d7f947fc-021d-4451-9f99-5411bb0905d1",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("06c1d118-4923-47e3-8f7f-ee0395cc62c6",
	"00000000-0000-0000-0000-000000000000",
	'val_actual_parameters',
	'',
	'//
select many v_pars from instances of V_PAR;
for each v_par in v_pars
  select one te_par related by v_par->TE_PAR[R2063];
  select one v_val related by v_par->V_VAL[R800];
  select one te_val related by v_val->TE_VAL[R2040];
  select one te_dt related by v_val->S_DT[R820]->TE_DT[R2021];
  te_val.OAL = ( te_par.Name + ":" ) + te_val.OAL;
  if ( 10 == te_dt.Core_Typ )
    // Cast event types to the base event type for passing (to timers).
    te_val.buffer = ( "(" + te_dt.ExtName ) + ( ")" + te_val.buffer );
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("06c1d118-4923-47e3-8f7f-ee0395cc62c6",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2f059e3d-49f6-491f-9b21-ffd33cf254e9",
	"00000000-0000-0000-0000-000000000000",
	'val_attribute_values',
	'',
	'//
select many v_avls from instances of V_AVL;
for each v_avl in v_avls
  ::val_attribute_value( v_avl:v_avl );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("2f059e3d-49f6-491f-9b21-ffd33cf254e9",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1bc732c6-74af-46a5-9416-e65641db4d51",
	"00000000-0000-0000-0000-000000000000",
	'val_attribute_value',
	'',
	'//
v_avl = param.v_avl;
select one v_val related by v_avl->V_VAL[R801];
select one te_val related by v_val->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_avl->V_VAL[R807];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one te_var related by v_avl->V_VAL[R807]->V_IRF[R801]->V_VAR[R808]->TE_VAR[R2039];
  select one o_attr related by v_avl->O_ATTR[R806];
  select one te_attr related by o_attr->TE_ATTR[R2033];
  if ( not_empty te_attr )
    root = "";
    if ( empty te_var )
      te_val.OAL = ( root_te_val.OAL + "." ) + te_attr.Name;
      te_val.buffer = ( root_te_val.buffer + "->" ) + te_attr.GeneratedName;
      root = root_te_val.buffer;
    else
      te_val.OAL = ( te_var.OAL + "." ) + te_attr.Name;
      te_val.buffer = ( te_var.buffer + "->" ) + te_attr.GeneratedName;
      root = te_var.buffer;
    end if;
    te_val.dimensions = te_attr.dimensions;
    te_val.array_spec = te_attr.array_spec;
    select one te_dim related by te_attr->TE_DIM[R2055];
    if ( not_empty te_dim )
      relate te_val to te_dim across R2079;
    else
          end if;
    // Maybe attribute value is actually derived.
    select one o_dbattr related by o_attr->O_BATTR[R106]->O_DBATTR[R107];
    if ( not_empty o_dbattr )
      select one act_ai related by v_val->ACT_AI[R689];
      if ( empty act_ai )
        // Only do this if we are not assigning inside the DAB OAL body.
        select one te_aba related by o_dbattr->TE_DBATTR[R2026]->TE_ABA[R2010];
        te_val.buffer = ( te_aba.GeneratedName + "( " ) + ( root + " )" );
        te_val.dimensions = te_aba.dimensions;
        te_val.array_spec = te_aba.array_spec;
        select one te_dim related by te_aba->TE_DIM[R2058];
        if ( not_empty te_dim )
          relate te_val to te_dim across R2079;
        else
                  end if;
      end if;
    end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("427e5aba-f178-4925-aa20-5661c3e04c97",
	"1bc732c6-74af-46a5-9416-e65641db4d51",
	'v_avl',
	"6fd240aa-6b20-4fd2-abeb-6fe6d413637b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6fd240aa-6b20-4fd2-abeb-6fe6d413637b",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Attribute Value Reference>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("1bc732c6-74af-46a5-9416-e65641db4d51",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("95df0954-d523-467d-880e-ff498f1f6760",
	"00000000-0000-0000-0000-000000000000",
	'val_member_values',
	'',
	'//
select many v_mvls from instances of V_MVL;
for each v_mvl in v_mvls
  ::val_member_value( v_mvl:v_mvl );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("95df0954-d523-467d-880e-ff498f1f6760",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("44271fa3-5f8c-49ef-85d4-3c3fcd252112",
	"00000000-0000-0000-0000-000000000000",
	'val_member_value',
	'',
	'//
v_mvl = param.v_mvl;
select one te_val related by v_mvl->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_mvl->V_VAL[R837];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one te_mbr related by v_mvl->S_MBR[R836]->TE_MBR[R2047];
  te_val.dimensions = te_mbr.dimensions;
  te_val.array_spec = te_mbr.array_spec;
  select one te_dim related by te_mbr->TE_DIM[R2059];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
  te_val.OAL = ( root_te_val.OAL + "." ) + te_mbr.Name;
  te_val.buffer = ( root_te_val.buffer + "." ) + te_mbr.GeneratedName;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("353baa40-17ed-42af-b3f6-2d0d33687282",
	"44271fa3-5f8c-49ef-85d4-3c3fcd252112",
	'v_mvl',
	"b260aaa9-5416-49e1-8262-694a17a972f3",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b260aaa9-5416-49e1-8262-694a17a972f3",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Member Value Reference>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("44271fa3-5f8c-49ef-85d4-3c3fcd252112",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7fb2d167-5c0c-49a2-adbc-12f076dc9c81",
	"00000000-0000-0000-0000-000000000000",
	'val_instance_reference_values',
	'',
	'//
unique_num = 0;
select many v_irfs from instances of V_IRF;
for each v_irf in v_irfs
  select one te_val related by v_irf->V_VAL[R801]->TE_VAL[R2040];
  select one te_var related by v_irf->V_VAR[R808]->TE_VAR[R2039];
  if ( not_empty te_var )
    te_val.OAL = te_var.OAL;
    te_val.buffer = te_var.buffer;
  else
    T::print(s:"CDS:  Understand why we do not have V_VAR here.");
    te_val.buffer = "v_irf_" + T::s(i:unique_num);
    unique_num = unique_num + 1;
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("7fb2d167-5c0c-49a2-adbc-12f076dc9c81",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4da9003a-0ba5-442f-8c50-5dbdc3f0e769",
	"00000000-0000-0000-0000-000000000000",
	'val_selection_test_values',
	'',
	'//
select many v_slrs from instances of V_SLR;
for each v_slr in v_slrs
  select one te_val related by v_slr->V_VAL[R801]->TE_VAL[R2040];
  te_val.buffer = "selected";
  te_val.OAL = "SELECTED";
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("4da9003a-0ba5-442f-8c50-5dbdc3f0e769",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6d29528f-2f38-4e6a-bc0e-3385b53c0981",
	"00000000-0000-0000-0000-000000000000",
	'val_inst_ref_set_values',
	'',
	'//
select many v_isrs from instances of V_ISR;
for each v_isr in v_isrs
  select one te_var related by v_isr->V_VAR[R809]->TE_VAR[R2039];
  select one te_val related by v_isr->V_VAL[R801]->TE_VAL[R2040];
  te_val.OAL = te_var.OAL;
  te_val.buffer = te_var.buffer;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("6d29528f-2f38-4e6a-bc0e-3385b53c0981",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eca6f687-73e9-41de-b1f9-b47aca64dc54",
	"00000000-0000-0000-0000-000000000000",
	'val_event_values',
	'',
	'//
select many v_edvs from instances of V_EDV;
for each v_edv in v_edvs
  select one te_val related by v_edv->V_VAL[R801]->TE_VAL[R2040];
  // If there are more than one transition into the state, there
  // may be more than one event parameter reference.  Select
  // any of them; they have the same names.
  select any te_parm related by v_edv->V_EPR[R834]->SM_EVTDI[R846]->TE_PARM[R2031];
  if ( empty te_parm )
    select any te_parm related by v_edv->V_EPR[R834]->C_PP[R847]->TE_PARM[R2048];
  else
    // Mark the event as used.
    select one te_evt related by te_parm->SM_EVTDI[R2031]->SM_EVT[R532]->TE_EVT[R2036];
    if ( not_empty te_evt )
      te_evt.UsedCount = te_evt.UsedCount + 1;
      te_evt.Used = true;
    end if;
  end if;
  te_val.OAL = "PARAM." + te_parm.Name;
  te_val.buffer = "rcvd_evt->" + te_parm.GeneratedName;
  te_val.dimensions = te_parm.dimensions;
  te_val.array_spec = te_parm.array_spec;
  select one te_dim related by te_parm->TE_DIM[R2056];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("eca6f687-73e9-41de-b1f9-b47aca64dc54",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("28058848-4e62-47d9-a962-3f8ed01d89a0",
	"00000000-0000-0000-0000-000000000000",
	'val_parameter_values',
	'',
	'//
select many v_pvls from instances of V_PVL;
for each v_pvl in v_pvls
  select one te_val related by v_pvl->V_VAL[R801]->TE_VAL[R2040];
  select one te_parm related by v_pvl->O_TPARM[R833]->TE_PARM[R2029];
  if ( empty te_parm )
    select one te_parm related by v_pvl->C_PP[R843]->TE_PARM[R2048];
    if ( empty te_parm )
      select one te_parm related by v_pvl->S_SPARM[R832]->TE_PARM[R2030];
      if ( empty te_parm )
        select one te_parm related by v_pvl->S_BPARM[R831]->TE_PARM[R2028];
        if ( empty te_parm )
          T::print(s:"CDS:  Understand why we do not have V_PVL related parameter here.");
        end if;
      end if;
    end if;
  end if;
  te_val.OAL = "PARAM." + te_parm.Name;
  te_val.buffer = te_parm.GeneratedName;
  te_val.dimensions = te_parm.dimensions;
  te_val.array_spec = te_parm.array_spec;
  select one te_dim related by te_parm->TE_DIM[R2056];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
  if ( 1 == te_parm.By_Ref )
    te_val.buffer = ( "(*" + te_parm.GeneratedName ) + ")";
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("28058848-4e62-47d9-a962-3f8ed01d89a0",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3432b040-37ad-450b-b732-8e4cbb5d1457",
	"00000000-0000-0000-0000-000000000000",
	'val_unary_op_values',
	'',
	'//
select many v_unys from instances of V_UNY;
for each v_uny in v_unys
  ::val_unary_op_value( v_uny:v_uny );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("3432b040-37ad-450b-b732-8e4cbb5d1457",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dddee33f-e157-4a17-a7cc-91ebcac3e1f6",
	"00000000-0000-0000-0000-000000000000",
	'val_unary_op_value',
	'',
	'//
v_uny = param.v_uny;
select one te_val related by v_uny->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_uny->V_VAL[R804];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  // Remove blanks and make lower case.
  op = T::r(s:v_uny.Operator);
  op = T::l(s:op);
  select any te_set from instances of TE_SET;
  select one v_irf related by root_v_val->V_IRF[R801];
  select one v_isr related by root_v_val->V_ISR[R801];
  if ( not_empty v_irf )
    if ( op == "not_empty" )
      te_val.buffer = ( "( 0 != " + root_te_val.buffer ) + " )";
    elif ( op == "empty" )
      te_val.buffer = ( "( 0 == " + root_te_val.buffer ) + " )";
    elif ( op == "cardinality" )
      te_val.buffer = ( "( 0 != " + root_te_val.buffer ) + " )";
    else
      T::print(s:"ERROR:  Unary set operator ${v_uny.Operator} is not supported.");
    end if;
  elif ( not_empty v_isr )
    if ( op == "not_empty" )
      te_val.buffer = ( ( "( ! " + te_set.emptiness ) + ( "( " + root_te_val.buffer ) ) + " ) )";
    elif ( op == "empty" )
      te_val.buffer = ( ( te_set.emptiness + "( " ) + ( root_te_val.buffer + " )" ) );
    elif ( op == "cardinality" )
      te_val.buffer = ( ( te_set.module + te_set.element_count ) + ( "( " + root_te_val.buffer ) ) + " )";
    else
      T::print(s:"ERROR:  Unary set operator ${v_uny.Operator} is not supported.");
    end if;
  else
    if ( op == "not" )
      te_val.buffer = "!" + root_te_val.buffer;
    else
      te_val.buffer = op + root_te_val.buffer;
    end if;
  end if;
  te_val.OAL = ( op + " " ) + root_te_val.OAL;
  // future support for vector arithmetic goes here
  te_val.dimensions = root_te_val.dimensions;
  te_val.array_spec = root_te_val.array_spec;
  select one te_dim related by root_te_val->TE_DIM[R2079];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("181d5a2a-62be-4fb9-aee8-c3b8011b32e2",
	"dddee33f-e157-4a17-a7cc-91ebcac3e1f6",
	'v_uny',
	"b1b11e61-c0ec-45a4-bbec-99baac48c51d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b1b11e61-c0ec-45a4-bbec-99baac48c51d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Unary Operation>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("dddee33f-e157-4a17-a7cc-91ebcac3e1f6",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("666ffc64-705c-496d-9e45-cf502c561723",
	"00000000-0000-0000-0000-000000000000",
	'val_binary_op_values',
	'',
	'//
select many v_bins from instances of V_BIN;
for each v_bin in v_bins
  ::val_binary_op_value( v_bin:v_bin );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("666ffc64-705c-496d-9e45-cf502c561723",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ed7c3ece-2f33-4235-9836-b0cc4ff438f4",
	"00000000-0000-0000-0000-000000000000",
	'val_binary_op_value',
	'',
	'//
v_bin = param.v_bin;
select one te_val related by v_bin->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one l_v_val related by v_bin->V_VAL[R802];
  select one l_te_val related by l_v_val->TE_VAL[R2040];
  if ( "" == l_te_val.buffer )
    ::gen_value( v_val:l_v_val );
  end if;
  select one r_v_val related by v_bin->V_VAL[R803];
  select one r_te_val related by r_v_val->TE_VAL[R2040];
  if ( "" == r_te_val.buffer )
    ::gen_value( v_val:r_v_val );
  end if;
  select one l_te_dt related by l_v_val->S_DT[R820]->TE_DT[R2021];
  select one r_te_dt related by r_v_val->S_DT[R820]->TE_DT[R2021];
  if ( ( 4 == l_te_dt.Core_Typ ) or ( 4 == r_te_dt.Core_Typ ) )
    // string
    select any te_string from instances of TE_STRING;
    select any te_instance from instances of TE_INSTANCE;
    if ( "+" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( ( te_instance.module + te_string.stradd ) + ( "( " + l_te_val.buffer ) ) + ( ", " + r_te_val.buffer ) ) + " )";
    else
      te_val.buffer = ( ( ( "( " + te_instance.module ) + ( te_string.strcmp + "( " ) ) + ( ( l_te_val.buffer + ", " ) + ( r_te_val.buffer + " ) " ) ) ) + ( v_bin.Operator + " 0 )" );
    end if;
  else
    select any te_target from instances of TE_TARGET;
    if ( "and" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " && " + r_te_val.buffer ) ) + " )";
    elif ( "or" == T::r(s:v_bin.Operator) )
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " || " + r_te_val.buffer ) ) + " )";
    elif ( ( ( ( "==" == T::r(s:v_bin.Operator) ) or ( "!=" == T::r(s:v_bin.Operator) ) ) and ( "C" == te_target.language ) ) and ( l_te_val.dimensions != 0 ) )
      element_count = 0;
      select one r_te_dim related by r_te_val->TE_DIM[R2079];
      if ( not_empty r_te_dim )
        element_count = r_te_dim.elementCount;
      end if;
      te_val.buffer = ( ( ( "( memcmp( " + l_te_val.buffer ) + ( ", " + r_te_val.buffer ) ) + ( ( ", sizeof(" + l_te_val.buffer ) + ( "[0]) * " + T::s(i:element_count) ) ) ) + ( ( ") " + v_bin.Operator ) + " 0 )" );
    else
      te_val.buffer = ( ( "( " + l_te_val.buffer ) + ( " " + v_bin.Operator ) ) + ( ( " " + r_te_val.buffer ) + " )" );
    end if;
  end if;
  // future support for vector arithmetic goes here
  te_val.dimensions = r_te_val.dimensions;
  te_val.array_spec = r_te_val.array_spec;
  select one te_dim related by r_te_val->TE_DIM[R2079];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
  te_val.OAL = ( ( "( " + l_te_val.OAL ) + ( " " + v_bin.Operator ) ) + ( ( " " + r_te_val.OAL ) + " )" );
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("6be4fdd9-8875-45e2-8f38-2cf75b5e3e65",
	"ed7c3ece-2f33-4235-9836-b0cc4ff438f4",
	'v_bin',
	"a6e95352-7701-470f-a154-2a42ea44c24d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a6e95352-7701-470f-a154-2a42ea44c24d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Binary Operation>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("ed7c3ece-2f33-4235-9836-b0cc4ff438f4",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3a3e267f-0643-458d-acdf-3a326a867a43",
	"00000000-0000-0000-0000-000000000000",
	'val_message_values',
	'',
	'//
select many v_msvs from instances of V_MSV;
for each v_msv in v_msvs
  ::val_message_value( v_msv:v_msv, salt:"msv" );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("3a3e267f-0643-458d-acdf-3a326a867a43",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9cb79ed1-dd4d-464a-a1d1-3c60586b98c6",
	"00000000-0000-0000-0000-000000000000",
	'val_message_value',
	'',
	'//
v_msv = param.v_msv;
salt = param.salt;
select one v_val related by v_msv->V_VAL[R801];
select one te_val related by v_val->TE_VAL[R2040];
select one te_mact related by v_msv->SPR_PEP[R841]->SPR_PO[R4503]->TE_MACT[R2050];
if ( empty te_mact )
  select one te_mact related by v_msv->SPR_REP[R845]->SPR_RO[R4502]->TE_MACT[R2052];
end if;
select many v_pars related by v_msv->V_PAR[R842];
select one te_aba related by te_mact->TE_ABA[R2010];
r = ::q_render_msg( te_mact:te_mact, v_pars:v_pars, ws:"", is_statement:false, salt:salt );
te_val.buffer = r;
te_val.OAL = ( ( te_mact.PortName + "::" ) + ( te_mact.MessageName + "(" ) ) + ( te_mact.OALParamBuffer + ")" );
te_val.dimensions = te_aba.dimensions;
te_val.array_spec = te_aba.array_spec;
select one te_dim related by te_aba->TE_DIM[R2058];
if ( not_empty te_dim )
  relate te_val to te_dim across R2079;
else
  end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("c1f8d4af-017a-4d24-b42f-5be1a4055861",
	"9cb79ed1-dd4d-464a-a1d1-3c60586b98c6",
	'v_msv',
	"bc2a0111-818c-47bb-9bbe-9a3092f8f2ac",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bc2a0111-818c-47bb-9bbe-9a3092f8f2ac",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Message Value>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO S_SPARM
	VALUES ("dd16a520-c600-428c-bcfc-213651ee470b",
	"9cb79ed1-dd4d-464a-a1d1-3c60586b98c6",
	'salt',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c1f8d4af-017a-4d24-b42f-5be1a4055861",
	'');
INSERT INTO PE_PE
	VALUES ("9cb79ed1-dd4d-464a-a1d1-3c60586b98c6",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("47446420-67c5-46ff-9e3c-addac9a8e672",
	"00000000-0000-0000-0000-000000000000",
	'val_bridge_values',
	'',
	'//
select many v_brvs from instances of V_BRV;
for each v_brv in v_brvs
  ::val_bridge_value( v_brv:v_brv, salt:"brv" );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("47446420-67c5-46ff-9e3c-addac9a8e672",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6d653180-d11f-42c1-8516-7f2c44d9cbd4",
	"00000000-0000-0000-0000-000000000000",
	'val_bridge_value',
	'',
	'//
v_brv = param.v_brv;
salt = param.salt;
select one te_brg related by v_brv->S_BRG[R828]->TE_BRG[R2025];
if ( not_empty te_brg )
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_brv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  select many v_pars related by v_brv->V_PAR[R810];
  select one te_aba related by te_brg->TE_ABA[R2010];
  select one te_ee related by v_brv->S_BRG[R828]->S_EE[R19]->TE_EE[R2020];
  te_ee.Included = true;
  r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false, invocation_flavor:salt );
  te_parm = r;
  parameters = te_parm.ParamBuffer;
  params_OAL = te_parm.OALParamBuffer;
  te_val.OAL = ( ( te_brg.EEkeyletters + "::" ) + ( te_brg.Name + "(" ) ) + ( params_OAL + ")" );
  if ( "C++" == te_target.language )
    if ( "TIM" == te_brg.EEkeyletters )
      te_val.buffer = ( "thismodule->tim->" + te_brg.GeneratedName ) + "(";
    else
      select one te_c related by te_ee->TE_C[R2085];
      if ( not_empty te_c )
        if ( "" == parameters )
          parameters = "thismodule";
        else
          parameters = "thismodule, " + parameters;
        end if;
      end if;
    end if;
  else
    te_val.buffer = ( te_aba.scope + te_brg.GeneratedName ) + "(";
  end if;
  if ( "" != parameters )
    te_val.buffer = ( te_val.buffer + " " ) + ( parameters + " " );
  end if;
  te_val.buffer = te_val.buffer + ")";
  te_val.dimensions = te_aba.dimensions;
  te_val.array_spec = te_aba.array_spec;
  select one te_dim related by te_aba->TE_DIM[R2058];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("e1e6207d-38d5-46f6-baf7-f070f9abf302",
	"6d653180-d11f-42c1-8516-7f2c44d9cbd4",
	'v_brv',
	"f379d69e-6f89-4ad8-9a75-30f08ee3f8c9",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f379d69e-6f89-4ad8-9a75-30f08ee3f8c9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Bridge Value>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO S_SPARM
	VALUES ("7f49a5cf-c6ef-4a3b-b293-1bc168aaabe6",
	"6d653180-d11f-42c1-8516-7f2c44d9cbd4",
	'salt',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e1e6207d-38d5-46f6-baf7-f070f9abf302",
	'');
INSERT INTO PE_PE
	VALUES ("6d653180-d11f-42c1-8516-7f2c44d9cbd4",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d328119e-0af9-4e1d-93e0-490c2ef0d43b",
	"00000000-0000-0000-0000-000000000000",
	'val_transform_values',
	'',
	'//
select many v_trvs from instances of V_TRV;
for each v_trv in v_trvs
  ::val_transform_value( v_trv:v_trv, salt:"trv" );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("d328119e-0af9-4e1d-93e0-490c2ef0d43b",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0827c15c-6df4-40f0-bf2d-6819c95c3914",
	"00000000-0000-0000-0000-000000000000",
	'val_transform_value',
	'',
	'//
v_trv = param.v_trv;
salt = param.salt;
select one te_tfr related by v_trv->O_TFR[R829]->TE_TFR[R2024];
if ( not_empty te_tfr )
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_trv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  select many v_pars related by v_trv->V_PAR[R811];
  select one te_aba related by te_tfr->TE_ABA[R2010];
  te_val.buffer = te_tfr.GeneratedName + "(";
  if ( te_tfr.Instance_Based == 1 )
    select one te_var related by v_trv->V_VAR[R830]->TE_VAR[R2039];
    if ( not_empty te_var )
      if ( "C++" == te_target.language )
        te_val.buffer = ( te_var.buffer + "->" ) + te_val.buffer;
      end if;
      te_val.buffer = te_val.buffer + te_var.buffer;
      te_val.OAL = te_var.OAL + ".";
    else
      // no variable, must be selection (selected reference)
      if ( "C++" == te_target.language )
        te_val.buffer = "selected->" + te_val.buffer;
      end if;
      te_val.buffer = te_val.buffer + "selected";
      te_val.OAL = "SELECTED.";
    end if;
  else
    if ( "C++" == te_target.language )
      select one te_class related by v_trv->O_TFR[R829]->O_OBJ[R115]->TE_CLASS[R2019];
      te_val.buffer = ( te_class.GeneratedName + "::" ) + te_val.buffer;
    end if;
    te_val.OAL = te_tfr.Key_Lett + "::";
  end if;
  r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false, invocation_flavor:salt );
  te_parm = r;
  parameters = te_parm.ParamBuffer;
  params_OAL = te_parm.OALParamBuffer;
  te_val.OAL = ( ( te_val.OAL + te_tfr.Name ) + ( "(" + params_OAL ) ) + ")";
  if ( te_tfr.Instance_Based == 1 )
    if ( ( "C++" == te_target.language ) or ( "" != parameters ) )
      te_val.buffer = te_val.buffer + ", ";
    end if;
  end if;
  if ( "C++" == te_target.language )
    te_val.buffer = te_val.buffer + "thismodule";
    if ( "" != parameters )
      te_val.buffer = te_val.buffer + ", ";
    end if;
  end if;
  te_val.buffer = ( te_val.buffer + parameters ) + ")";
  te_val.dimensions = te_aba.dimensions;
  te_val.array_spec = te_aba.array_spec;
  select one te_dim related by te_aba->TE_DIM[R2058];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("14be49e4-1d36-4f22-8268-d9186a116ede",
	"0827c15c-6df4-40f0-bf2d-6819c95c3914",
	'v_trv',
	"d22be5fe-283c-469a-8029-2fcaa2c689ba",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d22be5fe-283c-469a-8029-2fcaa2c689ba",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Operation Value>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO S_SPARM
	VALUES ("587bdfc0-ac6c-47b6-9a00-63a7c9bb8139",
	"0827c15c-6df4-40f0-bf2d-6819c95c3914",
	'salt',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"14be49e4-1d36-4f22-8268-d9186a116ede",
	'');
INSERT INTO PE_PE
	VALUES ("0827c15c-6df4-40f0-bf2d-6819c95c3914",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9e9b2b16-42f4-4f74-9a37-5ed0be2c12a3",
	"00000000-0000-0000-0000-000000000000",
	'val_synch_service_values',
	'',
	'//
select many v_fnvs from instances of V_FNV;
for each v_fnv in v_fnvs
  ::val_synch_service_value( v_fnv:v_fnv, salt:"fnv" );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("9e9b2b16-42f4-4f74-9a37-5ed0be2c12a3",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b9aad6d0-f5e5-43a9-9068-0684f37ccee1",
	"00000000-0000-0000-0000-000000000000",
	'val_synch_service_value',
	'',
	'//
v_fnv = param.v_fnv;
salt = param.salt;
select one te_sync related by v_fnv->S_SYNC[R827]->TE_SYNC[R2023];
if ( not_empty te_sync )
  select any te_target from instances of TE_TARGET;
  select one v_val related by v_fnv->V_VAL[R801];
  select one te_val related by v_val->TE_VAL[R2040];
  select many v_pars related by v_fnv->V_PAR[R817];
  select one te_aba related by te_sync->TE_ABA[R2010];
  r = ::gen_parameter_list( v_pars:v_pars, prefix_param_delimiter:false, invocation_flavor:salt );
  te_parm = r;
  parameters = te_parm.ParamBuffer;
  params_OAL = te_parm.OALParamBuffer;
  te_val.OAL = ( ( "::" + te_sync.Name ) + ( "(" + params_OAL ) ) + ")";
  name = te_sync.intraface_method;
  if ( "C++" == te_target.language )
    name = "thismodule->" + name;
  end if;
  te_val.buffer = name + "(";
  if ( "" != parameters )
    te_val.buffer = ( te_val.buffer + " " ) + ( parameters + " " );
  end if;
  te_val.buffer = te_val.buffer + ")";
  te_val.dimensions = te_aba.dimensions;
  te_val.array_spec = te_aba.array_spec;
  select one te_dim related by te_aba->TE_DIM[R2058];
  if ( not_empty te_dim )
    relate te_val to te_dim across R2079;
  else
      end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("6131038f-cd7c-4019-9d3e-412546985548",
	"b9aad6d0-f5e5-43a9-9068-0684f37ccee1",
	'v_fnv',
	"b6ef4c93-c3d0-4cda-8b0a-99eccecd77dd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b6ef4c93-c3d0-4cda-8b0a-99eccecd77dd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Function Value>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO S_SPARM
	VALUES ("d6013a23-e1b2-41fd-a8e0-d7092f49697b",
	"b9aad6d0-f5e5-43a9-9068-0684f37ccee1",
	'salt',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6131038f-cd7c-4019-9d3e-412546985548",
	'');
INSERT INTO PE_PE
	VALUES ("b9aad6d0-f5e5-43a9-9068-0684f37ccee1",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8e25d195-a5ca-480f-aa96-6d374e0f91d6",
	"00000000-0000-0000-0000-000000000000",
	'val_array_element_references',
	'',
	'//
select many v_aers from instances of V_AER;
for each v_aer in v_aers
  ::val_array_element_reference( v_aer:v_aer );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("8e25d195-a5ca-480f-aa96-6d374e0f91d6",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ebe376ba-ca5a-4f01-ab1a-1278a875ef31",
	"00000000-0000-0000-0000-000000000000",
	'val_array_element_reference',
	'',
	'//
v_aer = param.v_aer;
select one te_val related by v_aer->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_aer->V_VAL[R838];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  select one index_v_val related by v_aer->V_VAL[R839];
  select one index_te_val related by index_v_val->TE_VAL[R2040];
  if ( "" == index_te_val.buffer )
    ::gen_value( v_val:index_v_val );
  end if;
  te_val.OAL = ( root_te_val.OAL + "[" ) + ( index_te_val.buffer + "]" );
  te_val.buffer = ( root_te_val.buffer + "[" ) + ( index_te_val.buffer + "]" );
  // Peel off outer layer of dimensions.
  // CDS:  do not know how to do this with array_spec
  te_val.array_spec = root_te_val.array_spec;
  te_val.dimensions = root_te_val.dimensions - 1;
  select one next_te_dim related by root_te_val->TE_DIM[R2079]->TE_DIM[R2060.''precedes''];
  if ( not_empty next_te_dim )
    relate te_val to next_te_dim across R2079;
  else
      end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("8a7780f6-991c-4dcf-872c-f0b4ea89a82e",
	"ebe376ba-ca5a-4f01-ab1a-1278a875ef31",
	'v_aer',
	"82564ebb-6eea-4bb1-a100-101e3e967fbb",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("82564ebb-6eea-4bb1-a100-101e3e967fbb",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Array Element Reference>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("ebe376ba-ca5a-4f01-ab1a-1278a875ef31",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dadb57c8-d8a1-4d6f-923e-08b6766c0c63",
	"00000000-0000-0000-0000-000000000000",
	'val_array_length_values',
	'',
	'//
select many v_alvs from instances of V_ALV;
for each v_alv in v_alvs
  ::val_array_length_value( v_alv:v_alv );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO PE_PE
	VALUES ("dadb57c8-d8a1-4d6f-923e-08b6766c0c63",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("80f3d970-49cf-46f5-a47b-cee36dcd180c",
	"00000000-0000-0000-0000-000000000000",
	'val_array_length_value',
	'',
	'//
v_alv = param.v_alv;
select one te_val related by v_alv->V_VAL[R801]->TE_VAL[R2040];
if ( "" == te_val.buffer )
  select one root_v_val related by v_alv->V_VAL[R840];
  select one root_te_val related by root_v_val->TE_VAL[R2040];
  if ( "" == root_te_val.buffer )
    ::gen_value( v_val:root_v_val );
  end if;
  te_val.OAL = root_te_val.OAL + ".length";
  select any te_target from instances of TE_TARGET;
  if ( "C" == te_target.language )
    select one te_dim related by root_te_val->TE_DIM[R2079];
    if ( not_empty te_dim )
      te_val.buffer = ( ( ( T::s(i:te_dim.elementCount) + " /" ) + ( "* " + te_val.OAL ) ) + ( " *" + "/" ) );
    else
      te_val.buffer = root_te_val.buffer + ".ARRAY_LENGTH_NOT_FOUND()";
      T::print(s:"ERROR:  C model compiler does not support length operator for OAL value:  ${te_val.OAL}");
      T::exit(i:101);
    end if;
  else
    te_val.buffer = root_te_val.buffer + ".length";
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'');
INSERT INTO S_SPARM
	VALUES ("ed74a5ba-21f3-4dfc-ade9-94d4237909dd",
	"80f3d970-49cf-46f5-a47b-cee36dcd180c",
	'v_alv',
	"4e9dfb3b-a92b-483c-a582-6176a684fb06",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4e9dfb3b-a92b-483c-a582-6176a684fb06",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Array Length Value>',
	'',
	'',
	'../Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("80f3d970-49cf-46f5-a47b-cee36dcd180c",
	1,
	"d5dc7ad8-f580-4285-beac-ab600df434c5",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("d5dc7ad8-f580-4285-beac-ab600df434c5",
	1,
	"efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("efb614c1-5af5-40ee-92c8-706430a99db3",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'ooaofooa',
	'========================================================================

File:          $RCSfile: ooaofooa.xtuml,v $
Version:   $Revision: 1.127 $
Modified:  $Date: 2006/09/26 15:10:20 $

(c) Copyright 2004-2012 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp. and is not for external distribution.
========================================================================

This is the application domain for the Tiger project.

The processing in this model describes the activities
for model capture.



',
	0,
	'../ooaofooa.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'com.mentor.nucleus.bp.core',
	1,
	'../../../../com.mentor.nucleus.bp.core.xtuml');
