container_factory@void@@te_container@inst_ref<container>@@@
te_container = param.te_container;
te_container.flavor = "";
@@@
copyright_factory@void@@te_copyright@inst_ref<copyright>@@@
te_copyright = param.te_copyright;
   te_copyright.body = "your copyright statement can go here (from te_copyright.body)";
@@@
dlist_factory@void@@te_dlist@inst_ref<dlist>@@@
te_dlist = param.te_dlist;
  select any te_prefix from instances of TE_PREFIX;
   te_dlist.remove_node = te_prefix.result + "SetRemoveDlistNode";
@@@
dma_factory@void@@te_dma@inst_ref<dynamic memory allocation>@@@
te_dma = param.te_dma;
  select any te_prefix from instances of TE_PREFIX;
   te_dma.file = "sys_memory";
   te_dma.allocate = te_prefix.result + "malloc";
   te_dma.release = te_prefix.result + "free";
   te_dma.debugging_heap = false;
@@@
eq_factory@void@@te_eq@inst_ref<event queue>@@@
te_eq = param.te_eq;
  select any te_prefix from instances of TE_PREFIX;
   te_eq.ignored = "EVENT_IS_IGNORED";
   te_eq.cant_happen = "EVENT_CANT_HAPPEN";
   te_eq.system_events_union = te_prefix.result + "systemxtUMLevents";
   te_eq.system_event_pool = te_prefix.result + "xtUML_event_pool";
   te_eq.constant_type = te_prefix.result + "xtUMLEventConstant_t";
   te_eq.base_event_type = te_prefix.result + "xtUMLEvent_t";
   te_eq.base_variable = "mc_event_base";
   te_eq.max_events = te_prefix.define_u + "SYS_MAX_XTUML_EVENTS";
   te_eq.max_self_events = te_prefix.define_u + "SYS_MAX_SELF_EVENTS";
   te_eq.max_nonself_events = te_prefix.define_u + "SYS_MAX_NONSELF_EVENTS";
   te_eq.new = te_prefix.result + "NewxtUMLEvent";
   te_eq.allocate = te_prefix.result + "AllocatextUMLEvent";
   te_eq.delete = te_prefix.result + "DeletextUMLEvent";
   te_eq.modify = te_prefix.result + "ModifyxtUMLEvent";
   te_eq.self = te_prefix.result + "SendSelfEvent";
   te_eq.non_self = te_prefix.result + "SendEvent";
   te_eq.search_and_destroy = te_prefix.result + "EventSearchAndDestroy";
   te_eq.run_flag = te_prefix.result + "run_flag";
   te_eq.event_message_variable = "e";
   te_eq.scope = "";
@@@
extent_factory@void@@te_extent@inst_ref<extent>@@@
te_extent = param.te_extent;
  select any te_prefix from instances of TE_PREFIX;
  select any te_set from instances of TE_SET;
  select any te_typemap from instances of TE_TYPEMAP;
  select any te_instance from instances of TE_INSTANCE;
   te_extent.sets_type = te_set.base_class;
   te_extent.type = te_prefix.result + "Extent_t";
   te_extent.active = "active";
   te_extent.inactive = "inactive";
   te_extent.initializer = "{0}";
   te_extent.size_type = te_typemap.object_size_name;
   te_extent.istate_type = te_typemap.state_number_name;
   te_extent.istate_name = "initial_state";
   te_extent.container_type = te_set.element_type + "*";
   te_extent.container_name = "container";
   te_extent.pool_type = te_instance.handle;
   te_extent.pool_name = "pool";
   te_extent.population_type = te_typemap.instance_index_name;
   te_extent.population_name = "population";
   te_extent.rstorsize_type = te_typemap.object_size_name;
   te_extent.rstorsize_name = "size_no_rel";
   te_extent.linkfunc_name = "link_function";
   te_extent.size_name = "size";
@@@
file_factory@void@@te_file@inst_ref<file>@@@
te_file = param.te_file;
  select any te_prefix from instances of TE_PREFIX;
   te_file.hdr_file_ext = "h";
   te_file.src_file_ext = "c";
   te_file.sys_main = te_prefix.file + "sys_main";
   te_file.factory = te_prefix.file + "sys_xtuml";
   te_file.events = te_prefix.file + "sys_events";
   te_file.asm_file_ext = "s";
   te_file.obj_file_ext = "o";
   te_file.rpt_file_ext = "rpt";
   te_file.nvs = te_prefix.file + "sys_nvs";
   te_file.sets = te_prefix.file + "sys_sets";
   te_file.types = te_prefix.file + "sys_types";
   te_file.thread = te_prefix.file + "sys_thread";
   te_file.trace = te_prefix.file + "sys_trace";
   te_file.tim = te_prefix.file + "TIM_bridge";
   te_file.callout = te_prefix.file + "sys_user_co";
   te_file.ilb = te_prefix.file + "sys_ilb";
   te_file.persist = te_prefix.file + "sys_persist";
   te_file.xtumlload = te_prefix.file + "sys_xtumlload";
   te_file.interfaces = te_prefix.file + "sysc_interfaces";
   te_file.registers = te_prefix.file + "RegDefs";
   te_file.domain_color_path = ".";
   te_file.domain_source_path = "_ch";
   te_file.domain_include_path = "_ch";
   te_file.domain_sql_path = "schema/sql";
   te_file.system_source_path = "_ch";
   te_file.system_include_path = "_ch";
   te_file.system_color_path = ".";
   te_file.registry_mark = "registry.mark";
   te_file.system_mark = "system.mark";
   te_file.datatype_mark = "datatype.mark";
   te_file.event_mark = "event.mark";
   te_file.class_mark = "class.mark";
   te_file.domain_mark = "domain.mark";
   te_file.domain_functions_mark = "dom_functions.arc";
   te_file.system_functions_mark = "sys_functions.arc";
   te_file.bridge_mark = "bridge.mark";
   te_file.nvs_bridge = te_prefix.file + "NVS_bridge";
   te_file.arc_path = "mc3020/arc";
   te_file.root_path = ".";
@@@
instance_factory@void@@te_instance@inst_ref<instance>@@@
te_instance = param.te_instance;
  select any te_prefix from instances of TE_PREFIX;
   te_instance.scope = "";
   te_instance.create = te_prefix.result + "CreateInstance";
   te_instance.create_persistent = te_prefix.result + "CreatePersistent";
   te_instance.delete = te_prefix.result + "DeleteInstance";
   te_instance.delete_persistent = te_prefix.result + "DeletePersistent";
   te_instance.self = "self";
   te_instance.global_self = te_prefix.result + "GetSelf";
   te_instance.base = te_prefix.result + "InstanceBase_t";
   te_instance.handle = te_prefix.result + "iHandle_t";
   te_instance.factory_init = te_prefix.result + "ClassFactoryInit";
   te_instance.get_dci = te_prefix.result + "GetDCI";
   te_instance.get_event_dispatcher = te_prefix.result + "GetEventDispatcher";
   te_instance.get_thread_assignment = te_prefix.result + "GetThreadAssignment";
   te_instance.base_class = te_prefix.result + "Object_s";
   te_instance.max_extent = te_prefix.define_u + "SYS_MAX_OBJECT_EXTENT";
   te_instance.max_association_extent = te_prefix.define_u + "SYS_MAX_ASSOCIATION_EXTENT";
   te_instance.max_transient_extent = te_prefix.define_u + "SYS_MAX_TRANSIENT_EXTENT";
   te_instance.current_state = "current_state";
   te_instance.module = "";
@@@
ilb_factory@void@@te_ilb@inst_ref<interleaved bridge>@@@
te_ilb = param.te_ilb;
  select any te_prefix from instances of TE_PREFIX;
   te_ilb.file = "sys_ilb";
   te_ilb.interleave_bridge = "InterleaveBridge";
   te_ilb.define_name = te_prefix.define_u + "SYS_MAX_INTERLEAVED_BRIDGES";
   te_ilb.data_define_name = te_prefix.define_u + "SYS_MAX_INTERLEAVED_BRIDGE_DATA";
   te_ilb.interleave_bridge_done = "InterleaveBridgeDone";
   te_ilb.get_data = "GetILBData";
   te_ilb.dispatch = "DispatchInterleaveBridge";
@@@
persist_factory@void@@te_persist@inst_ref<persistence>@@@
te_persist = param.te_persist;
  select any te_prefix from instances of TE_PREFIX;
  select any te_typemap from instances of TE_TYPEMAP;
   te_persist.class_union = "";
   te_persist.instance_cache_depth = te_prefix.define_u + "PERSIST_INST_CACHE_DEPTH";
   te_persist.check_mark = "check_mark_post";
   te_persist.post_link = "";
   te_persist.link_type_name = te_prefix.type + "link_t";
   te_persist.persist_file = "sys_persist";
   te_persist.factory_init = te_prefix.result + "PersistFactoryInit";
   te_persist.commit = te_prefix.result + "PersistenceCommit";
   te_persist.restore = te_prefix.result + "PersistenceRestore";
   te_persist.remove = te_prefix.result + "PersistDelete";
   te_persist.link_cache_depth = te_prefix.define_u + "PERSIST_LINK_CACHE_DEPTH";
  // Return the name of the extended attribute variable for use by
  // the persistent restore operation.  This attribute represents the
  // instance index of the class extent at time of persistent stowage
  // together with the class number (across domains) of the class.
  // Also return the types for this attribute variable.
   te_persist.domainnum_name = "domainnum";
   te_persist.domainnum_type = te_typemap.domain_number_name;
   te_persist.classnum_name = "classnum";
   te_persist.classnum_type = te_typemap.object_number_name;
   te_persist.index_name = "index";
   te_persist.index_type = te_typemap.instance_index_name;
   te_persist.instid_type = "InstanceIdentifier_t";
   te_persist.instid_name = "instance_identifier";
   te_persist.dirty_type = "s1_t";
   te_persist.dirty_name = "persist_dirty";
   te_persist.dirty_dirty = 1;
   te_persist.dirty_clean = 0;
@@@
prefix_factory@void@@te_prefix@inst_ref<prefix>@@@
te_prefix = param.te_prefix;
   te_prefix.symbol = "Escher_";
   te_prefix.type = "Escher_";
   te_prefix.define_u = "ESCHER_";
   te_prefix.define_c = "Escher_";
   te_prefix.symbolsw = "";
   te_prefix.typesw = "";
   te_prefix.result = "Escher_";
   te_prefix.define_csw = "";
   te_prefix.define_usw = "";
   te_prefix.file = "";
   te_prefix.provided_port = "pport_";
   te_prefix.required_port = "rport_";
   te_prefix.channel = "channel_";
@@@
relinfo_factory@void@@te_relinfo@inst_ref<relationship information>@@@
te_relinfo = param.te_relinfo;
   te_relinfo.multiplicity = 0;
   te_relinfo.rel_phrase = "";
   te_relinfo.is_formalizer = false;
   te_relinfo.is_supertype = false;
   te_relinfo.generate_subtype = false;
   te_relinfo.gen_declaration = false;
@@@
relstore_factory@void@@te_relstore@inst_ref<relationship storage>@@@
te_relstore = param.te_relstore;
   te_relstore.data_init = "";
   te_relstore.link_calls = "";
   te_relstore.link_index = 0;
   te_relstore.data_fini = "";
   te_relstore.self_name = "self";
   te_relstore.data_declare = "";
@@@
set_factory@void@@te_set@inst_ref<set>@@@
te_set = param.te_set;
  select any te_prefix from instances of TE_PREFIX;
   te_set.module = "";
   te_set.copy = te_prefix.result + "CopySet";
   te_set.clear = te_prefix.result + "ClearSet";
   te_set.insert_element = te_prefix.result + "SetInsertElement";
   te_set.element_count = te_prefix.result + "SetCardinality";
   te_set.iterator_class_name = te_prefix.result + "Iterator_s";
   te_set.number_of_containoids = te_prefix.define_usw + "SYS_MAX_CONTAINERS";
   te_set.factory = te_prefix.result + "SetFactoryInit";
   te_set.insert_block = te_prefix.result + "SetInsertBlock";
   te_set.remove_instance = te_prefix.result + "SetRemoveInstance";
   te_set.contains = te_prefix.result + "SetContains";
   te_set.equality = te_prefix.result + "SetEquality";
   te_set.init = te_prefix.result + "InitSet";
   te_set.insert_instance = te_prefix.result + "SetInsertInstance";
   te_set.emptiness = te_prefix.result + "SetIsEmpty";
   te_set.get_any = te_prefix.result + "SetGetAny";
   te_set.remove_element = te_prefix.result + "SetRemoveElement";
   te_set.iterator_reset = te_prefix.result + "IteratorReset";
   te_set.iterator_next = te_prefix.result + "IteratorNext";
   te_set.base_class = te_prefix.result + "ObjectSet_s";
   te_set.element_type = te_prefix.result + "SetElement_s";
   te_set.scope = "";
@@@
slist_factory@void@@te_slist@inst_ref<slist>@@@
te_slist = param.te_slist;
  select any te_prefix from instances of TE_PREFIX;
   te_slist.remove_node = te_prefix.result + "SetRemoveNode";
@@@
string_factory@void@@te_string@inst_ref<string>@@@
te_string = param.te_string;
  select any te_prefix from instances of TE_PREFIX;
   te_string.memset = te_prefix.result + "memset";
   te_string.memmove = te_prefix.result + "memmove";
   te_string.strcpy = te_prefix.result + "strcpy";
   te_string.stradd = te_prefix.result + "stradd";
   te_string.strlen = te_prefix.result + "strlen";
   te_string.itoa = te_prefix.result + "itoa";
   te_string.atoi = te_prefix.result + "atoi";
   te_string.strcmp = te_prefix.result + "strcmp";
   te_string.strget = te_prefix.result + "strget";
   te_string.max_string_length = te_prefix.define_u + "SYS_MAX_STRING_LEN";
   te_string.debug_buffer_depth = te_prefix.define_u + "DEBUG_BUFFER_DEPTH";
@@@
thread_factory@void@@te_thread@inst_ref<thread>@@@
te_thread = param.te_thread;
  select any te_prefix from instances of TE_PREFIX;
   te_thread.file = "sys_thread";
   te_thread.mutex_lock = te_prefix.result + "mutex_lock";
   te_thread.mutex_unlock = te_prefix.result + "mutex_unlock";
   te_thread.nonbusy_wait = te_prefix.result + "nonbusy_wait";
   te_thread.nonbusy_wake = te_prefix.result + "nonbusy_wake";
   te_thread.shutdown = te_prefix.result + "thread_shutdown";
   te_thread.create = te_prefix.result + "thread_create";
   te_thread.enabled = false;
   te_thread.flavor = "POSIX";
   te_thread.serialize = false;
   te_thread.number_of_threads = 1;
   te_thread.extra_initialization = "";
   te_thread.AUTOSAR_enabled = te_prefix.define_usw + "AUTOSAR_ENABLED";
@@@
tim_factory@void@@te_tim@inst_ref<timer>@@@
te_tim = param.te_tim;
  select any te_prefix from instances of TE_PREFIX;
   te_tim.max_timers = te_prefix.define_u + "SYS_MAX_XTUML_TIMERS";
   te_tim.keyed_timer_support = false;
   te_tim.recurring_timer_support = true;
   te_tim.internal_type = "ETimer_t";
   te_tim.timer_event_search_and_destroy = false;
@@@
typemap_factory@void@@te_typemap@inst_ref<type map>@@@
te_typemap = param.te_typemap;
  select any te_prefix from instances of TE_PREFIX;
   te_typemap.instance_index_name = te_prefix.result + "InstanceIndex_t";
   te_typemap.instance_index_type = "u2_t";
   te_typemap.object_size_name = te_prefix.type + "ClassSize_t";
   te_typemap.object_size_type = "u2_t";
   te_typemap.object_number_name = te_prefix.type + "ClassNumber_t";
   te_typemap.object_number_type = "u2_t";
   te_typemap.state_number_name = te_prefix.type + "StateNumber_t";
   te_typemap.state_number_type = "u1_t";
   te_typemap.domain_number_name = te_prefix.type + "DomainNumber_t";
   te_typemap.domain_number_type = "u1_t";
   te_typemap.event_number_name = te_prefix.type + "EventNumber_t";
   te_typemap.event_number_type = "u1_t";
   te_typemap.event_priority_name = te_prefix.type + "EventPriority_t";
   te_typemap.event_priority_type = "u1_t";
   te_typemap.event_flags_name = te_prefix.type + "EventFlags_t";
   te_typemap.event_flags_type = "u1_t";
   te_typemap.poly_return_name = te_prefix.type + "PolyEventRC_t";
   te_typemap.poly_return_type = "u1_t";
   te_typemap.SEM_cell_type = "u1_t";
   te_typemap.SEM_cell_name = te_prefix.type + "SEMcell_t";
@@@
callout_factory@void@@te_callout@inst_ref<user callout>@@@
te_callout = param.te_callout;
  select any te_prefix from instances of TE_PREFIX;
   te_callout.initialization = te_prefix.symbolsw + "UserInitializationCallout";
   te_callout.pre_xtUML_initialization = te_prefix.symbolsw + "UserPreOoaInitializationCallout";
   te_callout.post_xtUML_initialization = te_prefix.symbolsw + "UserPostOoaInitializationCallout";
   te_callout.background_processing = te_prefix.symbolsw + "UserBackgroundProcessingCallout";
   te_callout.pre_shutdown = te_prefix.symbolsw + "UserPreShutdownCallout";
   te_callout.event_no_instance = te_prefix.symbolsw + "UserEventNoInstanceCallout";
   te_callout.event_free_list_empty = te_prefix.symbolsw + "UserEventFreeListEmptyCallout";
   te_callout.object_pool_empty = te_prefix.symbolsw + "UserObjectPoolEmptyCallout";
   te_callout.node_list_empty = te_prefix.symbolsw + "UserNodeListEmptyCallout";
   te_callout.interleaved_bridge_overflow = te_prefix.symbolsw + "UserInterleavedBridgeOverflowCallout";
   te_callout.self_event_queue_empty = te_prefix.symbolsw + "UserSelfEventQueueEmptyCallout";
   te_callout.non_self_event_queue_empty = te_prefix.symbolsw + "UserNonSelfEventQueueEmptyCallout";
   te_callout.persistence_error = te_prefix.symbolsw + "UserPersistenceErrorCallout";
   te_callout.file = "sys_user_co";
   te_callout.post_shutdown = te_prefix.symbolsw + "UserPostShutdownCallout";
   te_callout.event_cant_happen = te_prefix.symbolsw + "UserEventCantHappenCallout";
   te_callout.empty_handle_detected = te_prefix.symbolsw + "UserEmptyHandleDetectedCallout";
@@@
trace_factory@void@@te_trace@inst_ref<trace>@@@
te_trace = param.te_trace;
  select any te_prefix from instances of TE_PREFIX;
   te_trace.component_msg_start = te_prefix.define_usw + "COMP_MSG_START_TRACE";
   te_trace.component_msg_end = te_prefix.define_usw + "COMP_MSG_END_TRACE";
   te_trace.state_txn_start = te_prefix.define_usw + "STATE_TXN_START_TRACE";
   te_trace.oal_trace = te_prefix.define_usw + "OAL_ACTION_TRACE";
   te_trace.state_txn_end = te_prefix.define_usw + "STATE_TXN_END_TRACE";
   te_trace.state_txn_event_ignored = te_prefix.define_usw + "STATE_TXN_IG_TRACE";
   te_trace.state_txn_cant_happen = te_prefix.define_usw + "STATE_TXN_CH_TRACE";
@@@
target_factory@void@@te_target@inst_ref<target>@@@
te_target = param.te_target;
   te_target.language = "C";
   te_target.c2cplusplus_linkage_begin = "#ifdef\t__cplusplus\nextern\t""C""\t{\n#endif";
   te_target.c2cplusplus_linkage_end = "#ifdef\t__cplusplus\n}\n#endif";
   te_target.main = "main";
@@@
sys_singletons@void@@@
  create object instance i_te_prefix of TE_PREFIX;
   prefix_factory( i_te_prefix );
  create object instance i_te_typemap of TE_TYPEMAP;
  ::typemap_factory( i_te_typemap );
  create object instance i_te_container of TE_CONTAINER;
  ::container_factory( i_te_container );
  create object instance i_te_copyright of TE_COPYRIGHT;
  ::copyright_factory( i_te_copyright );
  create object instance i_te_dlist of TE_DLIST;
  ::dlinst_factory( i_te_dlist );
  create object instance i_te_dma of TE_DMA;
  ::dma_factory( i_te_dma );
  create object instance i_te_eq of TE_EQ;
  ::eq_factory( i_te_eq );
  create object instance i_te_file of TE_FILE;
  ::file_factory( i_te_file );
  create object instance i_te_instance of TE_INSTANCE;
  ::instance_factory( i_te_instance );
  create object instance i_te_ilb of TE_ILB;
  ::ilb_factory( i_te_ilb );
  create object instance i_te_persist of TE_PERSIST;
  ::persist_factory( i_te_persist );
  create object instance i_te_relinfo of TE_RELINFO;
  ::relinfo_factory( i_te_relinfo );
  create object instance i_te_relstore of TE_RELSTORE;
  ::relstore_factory( i_te_relstore );
  create object instance i_te_set of TE_SET;
  ::set_factory( i_te_set );
  create object instance i_te_slist of TE_SLIST;
  ::slist_factory( i_te_slist );
  create object instance i_te_string of TE_STRING;
  ::string_factory( i_te_string );
  create object instance i_te_thread of TE_THREAD;
  ::thread_factory( i_te_thread );
  create object instance i_te_tim of TE_TIM;
  ::tim_factory( i_te_tim );
  create object instance i_te_callout of TE_CALLOUT;
  ::callout_factory( i_te_callout );
  create object instance i_te_trace of TE_TRACE;
  ::trace_factory( i_te_trace );
  create object instance i_te_extent of TE_EXTENT;
  ::extent_factory( i_te_extent );
  create object instance i_te_target of TE_TARGET;
  ::target_factory( i_te_target );
  //
  create object instance i_te_assign of TE_ASSIGN;
  create object instance i_te_create_instance of TE_CREATE_INSTANCE;
  create object instance i_te_for of TE_FOR;
  create object instance i_te_if of TE_IF;
  create object instance i_te_while of TE_WHILE;
  create object instance i_te_elif of TE_ELIF;
  create object instance i_te_delete_instance of TE_DELETE_INSTANCE;
  create object instance i_te_create_event of TE_CREATE_EVENT;
  create object instance i_te_relate of TE_RELATE;
  create object instance i_te_relate_using of TE_RELATE_USING;
  create object instance i_te_unrelate of TE_UNRELATE;
  create object instance i_te_unrelate_using of TE_UNRELATE_USING;
  create object instance i_te_select of TE_SELECT;
  create object instance i_te_select_where of TE_SELECT_WHERE;
  create object instance i_te_generate_precreated_event of TE_GENERATE_PRECREATED_EVENT;
  create object instance i_te_event_parameters of TE_EVENT_PARAMETERS;
  create object instance i_te_generate of TE_GENERATE;
  create object instance i_te_generate_creator_event of TE_GENERATE_CREATOR_EVENT;
  create object instance i_te_generate_to_class of TE_GENERATE_TO_CLASS;
  create object instance i_te_sgn of TE_SGN;
  create object instance i_te_iop of TE_IOP;
  create object instance i_te_operation of TE_OPERATION;
  create object instance i_te_bridge of TE_BRIDGE;
  create object instance i_te_function of TE_FUNCTION;
  create object instance i_te_return of TE_RETURN;
@@@
